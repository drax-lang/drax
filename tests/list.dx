ll = [1, 2, 3, "string", [1,2,3]]

assert(List.length(ll) == 5, "list error: length error")

assert(List.at(ll, 3) == "string", "list error: array indexing")

assert(List.at(ll, -3) == 3, "list error: array indexing negative")

ll = [1, 2, 3] ++ [4, 5, 6]

assert(List.length(ll) == 6, "list error: concat length")

assert(List.at(List.at([1,2,[42]], 2), 0) == 42, "list error: nested list access")

assert(List.at(List.at(List.at([1,2,[42, [123]]], 2), 1), 0) == 123, "list error: nested big 3 level access ")

### module list

val = List.concat([1, 2, 3], [4, 5, 6])

assert(List.length(val) == 6, "list error: concat length")

assert(ll == val, "list error: compare ll with val")

assert(List.tail(ll) == [2, 3, 4, 5, 6], "list error: tail")

assert([{ a: 1 }] != [{ b: 1 }], "list error: list comparison")

ll = [1, 2, 3, 4, 5]

# Delete at
expected = [2, 3, 4, 5]
assert(List.remove_at(ll, 0) == expected, "list error: list remove_at(ll, 0)")

expected = [1, 2, 4, 5]
assert(List.remove_at(ll, 2) == expected, "list error: list remove_at(ll, 2)")

expected = [1, 2, 3, 4]
assert(List.remove_at(ll, 4) == expected, "list error: list remove_at(ll, 4)")

expected = [1, 3, 4, 5]
assert(List.remove_at(ll, 1) == expected, "list error: list remove_at(ll, 1)")

result = List.remove_at(ll, 0)
|> List.remove_at(0)
|> List.remove_at(0)
|> List.remove_at(0)
|> List.remove_at(0)
assert(List.is_empty(result), "list error: expected empty list")

# Insert at
expected = [101, 1, 2, 3, 4, 5]
assert(List.insert_at(ll, 0, 101) == expected, "list error: list insert_at(ll, 0, 101)")

expected = [1, 2, "101", 3, 4, 5]
assert(List.insert_at(ll, 2, "101") == expected, "list error: list insert_at(ll, 2, '101')")

expected = [1, 2, 3, 4, [1, 0, 1], 5]
assert(List.insert_at(ll, 4, [1, 0, 1]) == expected, "list error: list insert_at(ll, 4, [1, 0, 1])")

expected = [1, { a: "101" }, 2, 3, 4, 5]
assert(List.insert_at(ll, 1, { a: "101" }) == expected, "list error: list insert_at(ll, 1, { a: '101' })")

# Replace at
expected = [101, 2, 3, 4, 5]
assert(List.replace_at(ll, 0, 101) == expected, "list error: list replace_at(ll, 0, 101)")

expected = [1, 2, "101", 4, 5]
assert(List.replace_at(ll, 2, "101") == expected, "list error: list replace_at(ll, 2, '101')")

expected = [1, 2, 3, 4, [1, 0, 1]]
assert(List.replace_at(ll, 4, [1, 0, 1]) == expected, "list error: list replace_at(ll, 4, [1, 0, 1])")

expected = [1, { a: "101" }, 3, 4, 5]
assert(List.replace_at(ll, 1, { a: "101" }) == expected, "list error: list replace_at(ll, 1, { a: '101' })")

# Slice
expected = [1, 2]
assert(List.slice(ll, 0, 2) == expected, "list error: slice(ll, 0, 2)")

expected = [2]
assert(List.slice(ll, 1, 2) == expected, "list error: replace_at(ll, 1, 2)")

expected = [1, 2, 3, 4, 5]
assert(List.slice(ll, 0, 5) == expected, "list error: slice(ll, 0, 5)")

expected = [2, 3]
assert(List.slice(ll, -4, -2) == expected, "list error: slice(ll, -4, -2)")

assert(List.is_empty(List.slice(ll, 0, 0)), "list error: replace_at(ll, 1, { a: '101' }) expected empty list")

# Sum
expected = 15
assert(List.sum(ll) == expected, "list error: sum(ll) is different of 15")

expected = 0
assert(List.sum([]) == expected, "list error: sum([]) is different of 0")

expected = -15
assert(List.sum([-1, -2, -3, -4, -5]) == expected, "list error: sum([-1, -2, -3, -4, -5]) is different of -15")

assert(List.pop([1, 2, 3, 4, 5]) == [1, 2, 3, 4], "list error: the ultimate elem has not removed")
assert(List.pop([1, 2, 3]) == [1, 2], "list error: the ultimate elem has not removed")
assert(List.is_empty(List.pop([1])), "list error: expected empty list")
assert(List.is_empty(List.pop([])), "list error: expected empty list")
assert(List.pop([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5], "list error: the ultimate elem has not removed")
assert(List.pop([0]) == [], "list error: expected empty list")
assert(List.pop([-1, 0, 1]) == [-1, 0], "list error: the ultimate elem has not removed")
assert(List.pop([1.1, 2.2, 3.3]) == [1.1, 2.2], "list error: the ultimate elem has not removed")
assert(List.pop(['a', 'b', 'c']) == ['a', 'b'], "list error: the ultimate elem has not removed")

assert(List.shift([1, 2, 3, 4, 5]) == [2, 3, 4, 5], "list error: the ultimate elem has not removed")
assert(List.shift(List.shift([1, 2, 3, 4, 5])) == [3, 4, 5], "list error: the ultimate elem has not removed")
assert(List.is_empty(List.shift([1])), "list error: expected empty list")
assert(List.is_empty(List.shift([])), "list error: expected empty list")
assert(List.shift([9, 8, 7, 6, 5]) == [8, 7, 6, 5], "list error: the first elem has not removed")
assert(List.shift([0]) == [], "list error: expected empty list")
assert(List.shift([-3, -2, -1, 0]) == [-2, -1, 0], "list error: the first elem has not removed")
assert(List.shift([10.5, 20.5, 30.5]) == [20.5, 30.5], "list error: the first elem has not removed")
assert(List.shift(['x', 'y', 'z']) == ['y', 'z'], "list error: the first elem has not removed")

assert(List.pop(List.shift([1, 2, 3])) == [2], "list error: expected [2] as result")

l1 = [1, 2, 3, 4, 5]
l2 = [6, 7, 8, 9, 10]
expected = [[1, 6], [2, 7], [3, 8], [4, 9], [5, 10]]
assert(List.zip(l1, l2) == expected, "list error: the result of zip(l1, l2) is not valid")
assert(List.zip([1, 2, 3], [1, 2, 3]) == [[1, 1], [2, 2], [3, 3]], "list error: unexpected result") 
assert(List.zip([1], [1]) == [[1, 1]], "list error: unexpected result") 
assert(List.is_empty(List.zip([], [])), "list error: expected empty list")
assert(List.is_present(List.zip([{}], [{}])), "list error: expected completed list")
assert(List.zip([1, 2, 3], [4, 5, 6]) == [[1, 4], [2, 5], [3, 6]], "list error: unexpected result")
assert(List.zip([1], [100]) == [[1, 100]], "list error: unexpected result")
assert(List.zip([true, false], [true, false]) == [[true, true], [false, false]], "list error: unexpected result")
assert(List.zip(['apple', 'banana'], ['orange', 'grape']) == [['apple', 'orange'], ['banana', 'grape']], "list error: unexpected result")
assert(List.zip([nil, nil], [1, 2]) == [[nil, 1], [nil, 2]], "list error: unexpected result")

assert(List.hypot([3, 4]) == 5, "list error: expected 5 as result")
assert(List.hypot([6, 8]) == 10, "list error: expected 10 as result")
assert(List.hypot([-6, -8]) == 10, "list error: expected 10 as result")
assert(List.hypot([1]) == 1, "list error: expected 1 as result")
assert(List.hypot([]) == 0, "list error: expected 0 as result")
assert(List.hypot([0, 0]) == 0, "list error: expected 0 as result")
assert(List.hypot([0.5, 0.5]) == 0.7071067811865476, "list error: expected approximately 0.707 as result")
assert(List.hypot([-3, -4]) == 5, "list error: expected 5 as result")
assert(List.hypot([1, 2, 2]) == 3, "list error: expected 3 as result")
assert(List.hypot([7, 24]) == 25, "list error: expected 25 as result")
assert(List.hypot([0, 3, 4]) == 5, "list error: expected 5 as result")
assert(List.hypot([12, 16]) == 20, "list error: expected 20 as result")
assert(List.hypot([0.1, 0.2, 0.2]) == 0.30000000000000004, "list error: expected 0.3 as result")
assert(List.hypot([-1, -1, -1]) == 1.7320508075688772, "list error: expected approximately 1.732 as result")
assert(List.hypot([1, 1, 1, 1]) == 2, "list error: expected 2 as result")

assert(List.dot([3, 4], [3, 4]) == 25, "list error: expected 25 as result")
assert(List.dot([], []) == 0, "list error: expected 0 as result")
assert(List.dot([-6, -8, -23, 1.23, -0.55], [1, 2, 3, 4, 5]) == -88.83, "list error: expected -88.83 as result")
assert(List.dot([1], [1]) == 1, "list error: expected 1 as result")
assert(List.dot([1, 2], [-1, -2]) == -5, "list error: expected -5 as result")
assert(List.dot([0, 0, 0], [0, 0, 0]) == 0, "list error: expected 0 as result")
assert(List.dot([1, 2, 3], [4, 5, 6]) == 32, "list error: expected 32 as result")
assert(List.dot([2, 3], [2, 3]) == 13, "list error: expected 13 as result")
assert(List.dot([10, -2, 8], [2, -1, 0]) == 22, "list error: expected 22 as result")
assert(List.dot([0.5, -0.5], [1.5, 2]) == -0.25, "list error: expected -0.25 as result")
assert(List.dot([1, 2, 3, 4], [4, 3, 2, 1]) == 20, "list error: expected 20 as result")
assert(List.dot([-1, -2, -3], [1, 2, 3]) == -14, "list error: expected -14 as result")
assert(List.dot([0], [0]) == 0, "list error: expected 0 as result")
assert(List.dot([5, 6, 7, 8], [2, 3, 4, 5]) == 96, "list error: expected 116 as result")
assert(List.dot([-5, -6, -7, -8], [-2, -3, -4, -5]) == 96, "list error: expected 116 as result")

print("List done!")
