fun calc(num) do
    if (num > 100) do
        num
    else
        calc(num + 1)
    end
end

expected = calc(1)

assert(expected == 101, "function error: recursion sum")

###  empty function

fun empty() do end

expected = empty()

assert(expected == nil, "function error: unspected return")

### scope test

global = "abc"

fun change() do
    assert(global == "abc", "function error: fail to get global definition")
    global = "cba"
    assert(global == "cba", "function error: fail to get local definition")
end

change()

assert(global == "abc", "function error: security fail, local writting without permission")

fun say(n) do n end

assert(say("drax") == say("drax"), "function error: wrap fail")

assert(
    (say("drax") == (say("drax") == say("drax"))) == (say("drax") == (say("drax") == say("drax"))),
    "function error: nested"
)

### process anonimous Functions

af = fun (name, last) name ++ "->" ++ last end
assert(af("drax", "dev") == "drax->dev", "function error: anonimous function")

fun get_lambda() do
    fun (name) name ++ "." end
end

gl = get_lambda()
assert(gl("drax") == "drax.", "function error: anonimous function")

### fun returning fun

fun get_nested_lambda() do
    fun (name) fun (last) name ++ "." ++ last end end
end

nl = get_nested_lambda()

assert(typeof(nl) == "function", "function error: typeof to anonimous function")

### fun in local scope

fun local_scope_2_tst_lambda() do
    df = fun (num) num + 50 end
    assert(df(50) == 100, "function error: local scope")
end

local_scope_2_tst_lambda()

### get function definition

tmp = get_lambda
tmp2 = say

assert(typeof(tmp) == "function", "function error: get function definition")

assert(typeof(tmp2) == "function", "function error: get function definition")

otmp = tmp()

assert(otmp("other") == "other.", "function error: get function definition")

### test local range
### restore lacal scope size

fun test_fake_fn_1(key) do key end
fun test_fake_fn_2(key) do key end

fun get_value(version) do
    if (version == nil) do
        version = "fake"
        sleep(1)
    end

    sleep(1)

    if (version == "v2") do
        test_fake_fn_1("key")
    else
        test_fake_fn_2("key")
    end
end

fun local_range_scope() do
    get_value("fake")
    get_value("fake")
end

local_range_scope()

### test safe definition keep old definition

fun sum_test_safe_def(a) do a + 1 end

old_def = sum_test_safe_def

fun sum_test_safe_def(a) do a + 10 end

assert(sum_test_safe_def(1) == 11, "function error: sum_test_safe_def(1) == 11")

assert(old_def(1) == 2, "function error: sum_test_safe_def(1) == 2")

native_def_ref = Os.cmd

assert(typeof(native_def_ref) == "function", "function error: typedef(native_def_ref) == 'function'")

ref_concat_test = List.concat

assert(List.length(ref_concat_test([1, 2, 3], [4, 5, 6])) == 6, "ref_concat_test([1, 2, 3], [4, 5, 6]).length == 6")



### pipe operator

fun cat_test_tmp(name, last) do
    name ++ "--" ++ last
end

fun cat_test_tmp(name) do
    name ++ ":cat:"
end

fr = {sub: {sub: { fn: fun (a) a ++ "--by_lambda" end } } }

gg = "drax"
    |> cat_test_tmp()
    |> cat_test_tmp()
    |> cat_test_tmp()
    |> fr.sub.sub.fn()

assert(gg == "drax:cat::cat::cat:--by_lambda", "function error: pipe operator")

fun assign_error(a) do
    b = a
    a = 1
    a = 10
    assert(a == 10, "assign error: a == 5")
    a = b
    assert(a == 5, "assign error: a == 5")
end

assign_error(5)

## call directly
fun sub_function(a, b) do
    fun () do
        fun () do
            fun () do
                fun () do
                    fun () do
                        fun () do
                            a + b
                        end
                    end
                end
            end
        end
    end
end

assert(sub_function(5, 15)()()()()()() == 20, "sub_function(5, 15)()()()()()() == 20")

fun sub_function(a, b) do
    fun () do
        fun () do
            fun () do
                fun () do
                    fun () do
                        fun () do
                            fun (c, d, e) do
                                a + b + c + d + e
                            end
                        end
                    end
                end
            end
        end
    end
end

assert(sub_function(5, 15)()()()()()()(5, 6, 8) == 39, "sub_function(5, 15)()()()()()()(5, 6, 8) == 39")

fun test_return(arg) do

    if (arg == 'one') do
        return "my one"
    end

    if (arg == 'two') do
        return "my two"
    end

    if (arg == 'three') do
        return "my three"
    end

    "unspected value"
end

assert(test_return('one') == 'my one', "test_return('one') == 'my one'")
assert(test_return('two') == 'my two', "test_return('two') == 'my two'")
assert(test_return('three') == 'my three', "test_return('three') == 'my three'")
assert(test_return('none') == 'unspected value', "test_return('none') == 'unspected value'")

## self operator
fun callme(a) do
    if (a > 10) do
        return a
    end
    &(a + 1)
end

r = callme(0)

assert(r == 11, "r == 11")

## same funcion on call stack
##

fun make_Tree(v) do
    {
        rg: nil,
        lf: nil,
        value: v
    }
end

fun put(tree, value) do
    if (tree == nil) do
        return make_Tree(value)
    end

    Frame.put(tree, 'lf', put(tree.lf, value))
end

r = make_Tree(5) |> put(4)
assert(r == {rg: nil, lf: {rg: nil, lf: nil, value: 4}, value: 5}, 'fail to make simple tree')

print("Functions done!")
