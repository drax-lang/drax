fun calc(num) do
    if (num > 100) do
        num
    else
        calc(num + 1)
    end
end

expected = calc(1)

assert(expected == 101, "function error: recursion sum")

###  empty function

fun empty() do end

expected = empty()

assert(expected == nil, "function error: unspected return")

### scope test

global = "abc"

fun change() do
    assert(global == "abc", "function error: fail to get global definition")
    global = "cba"
    assert(global == "cba", "function error: fail to get local definition")
end

change()

assert(global == "abc", "function error: security fail, local writting without permission")

fun say(n) do n end

assert(say("drax") == say("drax"), "function error: wrap fail")

assert(
    (say("drax") == (say("drax") == say("drax"))) == (say("drax") == (say("drax") == say("drax"))),
    "function error: nested"
)

### process anonimous Functions

af = lambda (name, last) name ++ "->" ++ last end
assert(af("drax", "dev") == "drax->dev", "function error: anonimous function")

fun get_lambda() do
    lambda (name) name ++ "." end
end

gl = get_lambda()
assert(gl("drax") == "drax.", "function error: anonimous function")

### lambda returning lambda

fun get_nested_lambda() do
    lambda (name) lambda (last) name ++ "." ++ last end end
end

nl = get_nested_lambda()

assert(typeof(nl) == "function", "function error: anonimous function")

### lambda in local scope

fun local_scope_2_tst_lambda() do
    df = lambda (num) num + 50 end
    assert(df(50) == 100, "function error: local scope")
end

local_scope_2_tst_lambda()

### get function definition

tmp = &get_lambda/0
tmp2 = &say/1

assert(typeof(tmp) == "function", "function error: get function definition")

assert(typeof(tmp2) == "function", "function error: get function definition")

otmp = tmp()

assert(otmp("other") == "other.", "function error: get function definition")

### test local range
### restore lacal scope size

fun test_fake_fn_1(key) do key end
fun test_fake_fn_2(key) do key end

fun get_value(version) do
    if (version == nil) do
        version = "fake"
        sleep(1)
    end

    sleep(1)

    if (version == "v2") do
        test_fake_fn_1("key")
    else
        test_fake_fn_2("key")
    end
end

fun local_range_scope() do
    get_value("fake")
    get_value("fake")
end

local_range_scope()


print("Functions done!")
