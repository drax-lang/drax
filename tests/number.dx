fun sum(a, b) do
    a + b
end

result = sum(21, 21)

assert(result == 42, "number error: sum(21, 21)")

expected = (5/2)

assert(expected == 2.5, "number error: (5/2)")

expected = (10*3)

assert(expected == 30, "number error: 10*3")

### test octal

assert(0o173 == 123, "number error: octal number parsing")

### test binary

assert(0b1111011 == 123, "number error: binary number parsing")

### test hex

assert(0x7b == 123, "number error: hex number parsing 0x7b")

assert(0x7BF == 1983, "number error: hex number parsing 0x7BF")

### def middle expression

expected = 1 + 2 * 3 + 4 * 5 - 6 * 7 + 8 * 9

assert(expected == 57, "number error: middle expression")

expected = 1 + 2 * (3 + 4)

assert(expected == 15, "number error: '(' exp ')' expression")

fix_value = 123456

assert(fix_value == 123456, "number error: fix value")

### process numbers without spaces

result = 21+21
assert(result == 42, "number error: 21+21")

result = 21*21
assert(result == 441, "number error: 21*21")

result = 21-21
assert(result == 0, "number error: 21-21")

result = 21/3
assert(result == 7, "number error: 21/21")

assert(Number.to_string(11.7) == "11.7", "number error: Number.to_string(11.7)")
assert(Number.to_string(-11.7) == "-11.7", "number error: Number.to_string(-11.7)")
assert(Number.to_string(-0.17) == "-0.17", "number error: Number.to_string(-0.17)")
assert(Number.to_string(8080) == "8080", "number error: Number.to_string(8080)")

assert(Number.max(1, 2) == 2, "number error: expected 2 as result")
assert(Number.max(-10, -2) == -2, "number error: expected -2 as result")
assert(Number.max(-10, -20) == -10, "number error: expected -10 as result")
assert(Number.max(-10, 0) == 0, "number error: expected 0 as result")

assert(Number.min(1, 2) == 1, "number error: expected 1 as result")
assert(Number.min(-10, -2) == -10, "number error: expected -10 as result")
assert(Number.min(-10, -20) == -20, "number error: expected -20 as result")
assert(Number.min(-10, 0) == -10, "number error: expected -10 as result")

assert(!Number.is_even(1), "number error: 1 not is even")
assert(!Number.is_even(13), "number error: 13 not is even")
assert(Number.is_even(2), "number error: 2 is even")
assert(Number.is_even(Math.pow(2, 64)), "number error: (2 ^ 64) is even")

assert(Number.is_odd(1), "number error: 1 is odd")
assert(Number.is_odd(13), "number error: 13 is even")
assert(!Number.is_odd(2), "number error: 2 not is even")
assert(!Number.is_odd(Math.pow(2, 64)), "number error: (2 ^ 64) not is even")

assert(Number.floor_div(10, 3) == 3, "number error: expected 3 as result")
assert(Number.floor_div(100, 20) == 5, "number error: expected 5 as result")
assert(Number.floor_div(2.5, 0.5), "number error: expected 5 as result")
assert(Number.floor_div(13, 2) == 6, "number error: expected 6 as result")

print("Number done!")
