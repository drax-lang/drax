fun say(name, last) do
    name ++ " " ++ last
end

expected = (say("Hello", "World"))

assert(expected == "Hello World", "string error: Concat with nested functions")

assert(String.to_number("1234") == 1234, "string error: unspected return to_number with cmp")

assert(typeof(String.to_number("1234")) == typeof(1234), "string error: unspected return to_number with cmp")

assert(String.to_number("0xff") == 255, "string error: unspected return to_number hex")
assert(String.to_number("0xff") == 0xff, "string error: unspected return to_number hex raw")

assert(String.to_number("0o765") == 501, "string error: unspected return to_number octal")
assert(String.to_number("0o765") == 0o765, "string error: unspected return to_number octal raw")

assert(String.to_number("0b1111011") == 123, "string error: unspected return to_number binary")
assert(String.to_number("0b1111011") == 0b1111011, "string error: unspected return to_number binary raw")

v = String.split("foo\nbar\nbaz", "\n")

# assert(typeof(v) == "list", "string error: failt split return type")

v = String.split("http://addr.com", "http://")

assert(List.at(v, 0) == "", "string error: failt split return type")
assert(List.at(v, 1) == "addr.com", "string error: failt split return type")

### check index

assert(String.at("foo", 0) == "f", "string error: array indexing error to string case 1")

assert(String.at("bar", -1) == "r", "string error: array indexing error to string case 2")

assert(String.at("bar", 10) == "", "string error: array indexing error to string case 3")

### teste with definitions

s = String.at("bar", -10)
assert(s == "", "string error: array indexing error to string case 4")

assert(String.length("process \" ") == 10, "string error: fail to scape string")

# ### lower/upper case

assert(String.to_lowercase("FOO") == "foo", "string error: fail to lower case")
assert(String.to_uppercase("abcdefghijklmnopqrstuvwxyz_1234567890") == "ABCDEFGHIJKLMNOPQRSTUVWXYZ_1234567890", "string error: fail to upper case by alphabet")
assert(String.to_uppercase("foo") == "FOO", "string error: fail to upper case")

s = "abcd"
result = String.to_tensor(s)
expected = <<u8 :: 97, 98, 99, 100>>

assert(Tensor.type(result), "string error: expected u8 tensor was result")
assert(result == expected, "string error: result not expected")
assert(String.from_tensor(result) == s, "string error: the result is different from what was expected")

print("String done!")
