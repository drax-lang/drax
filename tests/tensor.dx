ll = <<1, 2, 3>> ++ <<4, 5, 6>>

assert(Tensor.length(ll) == 6, "tensor error: concat length")
assert(ll == <<1, 2, 3, 4, 5, 6>>, "tensor error: concat tensor")

assert(Tensor.at(Tensor.at(<< <<1>>,<<2>>,<<42>>,<<2>> >>, 2), 0) == 42, "tensor error: nested tensor access")

### module tensor

val = Tensor.concat(<<1, 2, 3>>, <<4, 5, 6>>)

assert(Tensor.length(val) == 6, "tensor error: concat length")

assert(Tensor.tail(ll) == <<2, 3, 4, 5, 6>>, "tensor error: tail")

ll = <<1, 2, 3, 4, 5>>

# Delete at
expected = <<2, 3, 4, 5>>
assert(Tensor.remove_at(ll, 0) == expected, "tensor error: tensor remove_at(ll, 0)")

expected = <<1, 2, 4, 5>>
assert(Tensor.remove_at(ll, 2) == expected, "tensor error: tensor remove_at(ll, 2)")

expected = <<1, 2, 3, 4>>
assert(Tensor.remove_at(ll, 4) == expected, "tensor error: tensor remove_at(ll, 4)")

expected = <<1, 3, 4, 5>>
assert(Tensor.remove_at(ll, 1) == expected, "tensor error: tensor remove_at(ll, 1)")

result = Tensor.remove_at(ll, 0)
|> Tensor.remove_at(0)
|> Tensor.remove_at(0)
|> Tensor.remove_at(0)
|> Tensor.remove_at(0)
assert(Tensor.is_empty(result), "tensor error: expected empty tensor")

# Insert at
expected = <<101, 1, 2, 3, 4, 5>>
assert(Tensor.insert_at(ll, 0, 101) == expected, "tensor error: tensor insert_at(ll, 0, 101)")

# Replace at
expected = <<101, 2, 3, 4, 5>>
assert(Tensor.replace_at(ll, 0, 101) == expected, "tensor error: tensor replace_at(ll, 0, 101)")

# Slice
expected = <<1, 2>>
assert(Tensor.slice(ll, 0, 2) == expected, "tensor error: slice(ll, 0, 2)")

expected = <<2>>
assert(Tensor.slice(ll, 1, 2) == expected, "tensor error: replace_at(ll, 1, 2)")

expected = <<1, 2, 3, 4, 5>>
assert(Tensor.slice(ll, 0, 5) == expected, "tensor error: slice(ll, 0, 5)")

expected = <<2, 3>>
assert(Tensor.slice(ll, -4, -2) == expected, "tensor error: slice(ll, -4, -2)")

assert(Tensor.is_empty(Tensor.slice(ll, 0, 0)), "tensor error: replace_at(ll, 1, { a: '101' }) expected empty tensor")

# Sum
expected = 15
assert(Tensor.sum(ll) == expected, "tensor error: sum(ll) is different of 15")

expected = 0
assert(Tensor.sum(<<>>) == expected, "tensor error: sum(<<>>) is different of 0")

expected = -15
assert(Tensor.sum(<<-1, -2, -3, -4, -5>>) == expected, "tensor error: sum(<<-1, -2, -3, -4, -5>>) is different of -15")

assert(Tensor.sum(<< <<1,2,3>> , <<1,1,2>>, <<<<1,2,3>>>>  >>) == 16, "fail to sum mult dim. tensor")

## types tests

val = <<f64 :: 1,2,3>>
assert(<<f64 :: 1,2,3>> == val, "fail to mount f64 = <<f64 :: 1,2,3>> == val")

assert(Tensor.at(<<f32::1,2,3>>, 1) == 2, "fail to mount get f32 = Tensor.at(<<f32::1,2,3>>, 1)")

assert(Tensor.at(Tensor.concat(<<f32::1,2,3>>, <<f32::4,5,6>>), 5) == 6, "fail to mount get concat f32.")

assert(Tensor.at(<<f32::1,2,3>> ++ <<f32::4,5,6>>, 5) == 6, "fail to mount get concat(++) f32.")

assert(<<f32::1,2,3>> |> Tensor.head() == 1, "fail to get head on f32")

assert(<<f32::1,2,3>> |> Tensor.tail() == <<f32::2,3>>, "fail to get tail on f32")

assert(Tensor.insert_at(<<f32::1,2,3>>, 1, 5) |> Tensor.at(1) == 5, "fail to insert_at f32")

assert(Tensor.replace_at(<<f32::1,2,3,4>>, 0, -1) |> Tensor.at(0) == -1, "fail to replace_at f32")

# i16 tests
assert(<<i16::1,2.55,3.555>> |> Tensor.sum() == 6, "fail to sum tensor i16")
list_i16 = <<i16::32767, -32768, 123, -123>>

assert(Tensor.at(list_i16, 0) == 32767, "i16 max value invalid.")

assert(Tensor.at(list_i16, 1) == -32768, "i16 min value invalid")

assert(Tensor.at(list_i16, 2) == 123, "i16 positive value invalid")

assert(Tensor.at(list_i16, 3) == -123, "i16 negative value invalid")

# Sum test for i32 tensor values
assert(<<i32::1, 2.55, 3.555>> |> Tensor.sum() == 6, "fail to sum tensor i32")

list_i32 = <<i32::2147483647, -2147483648, 100000, -100000>>

# Max and min value tests for i32
assert(Tensor.at(list_i32, 0) == 2147483647, "i32 max value invalid.")

assert(Tensor.at(list_i32, 1) == -2147483648, "i32 min value invalid")

assert(Tensor.at(list_i32, 2) == 100000, "i32 positive value invalid")

assert(Tensor.at(list_i32, 3) == -100000, "i32 negative value invalid")

## Sum test for i64 tensor values
assert(<<i64::1, 2.55, 3.555>> |> Tensor.sum() == 6, "fail to sum tensor i64")

max_i_double = 9007199254740991  # 2^53 - 1
list_i64 = <<i64::max_i_double, -max_i_double, 10000000000, -10000000000>>

# Max and min value tests for i64
assert(Tensor.at(list_i64, 0) == 9007199254740991, "i64 max value invalid.")

assert(Tensor.at(list_i64, 1) == -9007199254740991, "i64 min value invalid")

assert(Tensor.at(list_i64, 2) == 10000000000, "i64 positive value invalid")

assert(Tensor.at(list_i64, 3) == -10000000000, "i64 negative value invalid")

print("Tensor done!")

## add
assert(Tensor.add(<<i16::1,2,3, 4, 5>>, <<i16::1,2,3,4>>) == <<i16::2,4,6,8,5>>, "fail to add i16 tensor")
assert(Tensor.add(<<i32::1,2,3, 4, 5>>, <<i32::1,2,3,4>>) == <<i32::2,4,6,8,5>>, "fail to add i32 tensor")
assert(Tensor.add(<<i64::1,2,3, 4, 5>>, <<i64::1,2,3,4>>) == <<i64::2,4,6,8,5>>, "fail to add i64 tensor")
assert(Tensor.add(<<f32::1.1,2,3, 4, 5>>, <<f32::1.1,2,3,4>>) == <<f32::2.2,4,6,8,5>>, "fail to add f32 tensor")
assert(Tensor.add(<<f64::1.1,2,3, 4, 5>>, <<f64::1.1,2,3,4>>) == <<f64::2.2,4,6,8,5>>, "fail to add f64 tensor")

res =
    <<i16:: 123,456,789,456,123>>
    |> Tensor.add(<<i16:: 123,456,789,456,123>>)
    |> Tensor.add(<<i16:: 123,456,789,456,123>>)
    |> Tensor.add(<<i16:: 123,456,789,456,123>>)
    |> Tensor.add(<<i16:: 123,456,789,456,123>>)

assert(res == <<i16::615, 2280, 3945, 2280, 615>>, "fail to add mult tensor")

multd = <<
    <<1,2,3>>,
    <<4,5,6>>,
    <<7,8,9>>
>> + <<
    <<1,2,3>>,
    <<4,5,6>>,
    <<7,8,9>>
>>

expc = <<
  <<f64 :: 2.000000000000000, 4.000000000000000, 6.000000000000000>>, 
  <<f64 :: 8.000000000000000, 10.000000000000000, 12.000000000000000>>, 
  <<f64 :: 14.000000000000000, 16.000000000000000, 18.000000000000000>>
>>
assert(multd == expc, "fail to add mult tensor")